function[N_IHA,V_IHA,S_IHA]=iha_3d(T1,Fs,string,border)% Input is T, consisting of %          R: ixjxk orientation matrix%          P: ixj position vector%% Output is:%                 N_IHA direction vector IHA%                 V_IHA translation velocity along the IHA%                 S_IHA projection of point P on the IHA% See Woltring (1990) or Spoor (1980)%% 14 oktober 2004, description and V-IHA modified 14-12-2006% declaration of default input arguments if not specifiedif nargin==3, border=0.1;    disp(['the program uses a cut-off of 10% omega-max for the estimation of helical axes'])endif nargin==2, border=0.1;string='S';    disp(['the program uses a cut-off of 10% omega-max for the estimation of helical axes'        'and will be used for the standing matrices convention                         '])endif nargin==1,border=0.1;string='S';Fs=10;    disp(['the program uses a cut-off of 10% omega-max for the estimation of helical axes'        'and will be used for the standing matrices convention                         '        'and a sample frequency of 10 Hz                                               '])endFsR1=T1(1:3,1:3,:);P1=squeeze(T1(1:3,4,:));[m,n]=size(P1);if n==3, P1=P1';end[I,J,K]=size(R1);N_IHA=NaN(3,K);V_IHA=NaN(1,K);S_IHA=NaN(3,K);P1dot=afgnew3d(P1,Fs);if string(1)=='s' | string(1)=='S',    W1=woltring3d(R1,Fs);else    W1=woltring3d(R1,Fs,1);endgrenswaarde=max(sqrt(sum(W1.^2)))*borderfor k=1:K    if norm(W1(:,k))>grenswaarde, % extra limitation of a minimum rotation velocity  (10% wmax)        wu(k)=norm(W1(:,k));        N_IHA(:,k)=W1(:,k)/wu(k);        vu=P1dot(:,k)'*N_IHA(:,k);        if string(1)=='s'|string(1)=='S',                        S_IHA(:,k)=P1(:,k)+[cross(W1(:,k),P1dot(:,k))] / [wu(k)^2]; % +P1(:,k);                   else,            S_IHA(:,k)=P1(:,k)-[cross(W1(:,k),P1dot(:,k))]/(wu(k)*wu(k)); %+P1(:,k);        end        V_IHA(k)=vu;            else        % norm(W1(:,k))endend